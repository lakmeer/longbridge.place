---
//@ts-nocheck
import { getEntry, type CollectionEntry } from 'astro:content'
import { absolutePath } from '@utils'

import Card     from '@comp/Card.astro'
import MiniLink from '@comp/MiniLink.astro'

interface Props {
  person: CollectionEntry<'person'>
  link?: string
  size?: 'sm' | 'md' | 'lg'
}

let { person, link, size = 'lg' } = Astro.props

const now      = await getEntry('misc', 'now')
const headshot = await getEntry('image', person.data.headshot.id)

const gridLayout =
  size === 'sm' ? '[grid-template-columns:1fr_2fr]' :
  size === 'md' ? '[grid-template-columns:1fr_1fr]' :
    '[grid-template-columns:1fr_1fr]'

const age = typeof person.data.birthdate === 'number' ? now.data.year - person.data.birthdate : person.data.birthdate
---

<Card heading="Citizen" link={link}>
  <div class:list={["grid gap-8", gridLayout ]}>
    <img src={absolutePath(headshot.data.filepath)} alt={person.data.day_name} 
        class="w-full aspect-square object-cover " />

    <div class="grid gap-2">
      <h3 class="font-title text-2xl">{person.data.day_name}</h3>

      <dl>
        <dt>Names</dt>
        <dd>{person.data.names}</dd>

        { person.data.gender && <>
          <dt>Gender</dt>
          <dd>{person.data.gender}</dd>
        </> }

        { person.data.vocation && <>
          <dt>Vocation</dt>
          <dd>{person.data.vocation}</dd>
        </> }

        { person.data.birthdate && <>
          <dt>Age</dt>
          <dd>{age}</dd>
        </> }

        { person.data.residence && <>
          <dt>Residence</dt>
          <dd><MiniLink ref={person.data.residence} /></dd>
        </> }

        { person.data.affiliation && <>
          <dt>Affiliation</dt>
          <dd>{person.data.affiliation}</dd>
        </> }

      </dl>
    </div>
  </div>
</Card>

<style>
  dt { font-weight: 500; font-family: var(--font-title); }
  dd + dt { margin-top: 0.5rem; }
</style>
